import streamlit as st
import json
import openai


def session_update_by_request_data():
    # global input_emptier, req_but_emptier
    st.session_state.input_prompt = str(input_prompt)
    

def create_requesting_place(input_prompt_text : str = ''):
    global input_emptier, req_but_emptier, input_prompt, request_button



    input_emptier = st.empty()
    with input_emptier:
        input_prompt = st.text_input("–û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å", input_prompt_text)


    req_but_emptier = st.empty()
    with req_but_emptier:
        request_button = st.button("–û—Ñ–æ—Ä–º–ª—è–µ–º")

def del_inputs():
    global input_emptier, req_but_emptier, input_prompt, request_button
    
    input_emptier.empty()
    req_but_emptier.empty()
    
    del input_prompt, request_button


with open("configs.json", "r") as config_file:
    api_key = json.loads(config_file.read())["api_key"]

openai.api_key = api_key


system_prompt = st.sidebar.file_uploader("–§–∞–π–ª —Å–æ —Å—Ç–∞—Ä—Ç–æ–≤—ã–º –ø—Ä–æ–º–ø—Ç–æ–º", ["txt"])
system_prompt_text = ""

if system_prompt:
    st.code(system_prompt.getvalue().decode())
    system_prompt_text = system_prompt.getvalue().decode()
    
    


if 'input_prompt' not in st.session_state:
    st.session_state.input_prompt = ''

create_requesting_place(st.session_state.input_prompt)


if request_button:
    input_prompt_text = str(input_prompt)

    # session_update_by_request_data()
    # del_inputs()

    with st.spinner("–ñ–¥–µ–º –æ—Ç–≤–µ—Ç"):
        response = openai.ChatCompletion.create(model="gpt-3.5-turbo", messages=[{"role": "system", "content" : system_prompt_text}, {"role": "user", "content" : input_prompt_text}])
    
    # create_requesting_place(st.session_state.input_prompt)

    if "choices" in response:
        response = response.choices[0].message.content
        
        st.code(response)

        # if st.button("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å"):
        #     pc.copy(response)
            # st.toast("–£—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ", 'üíæ')

    else:
        st.code("–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞")
        # st.toast("–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞")
    
